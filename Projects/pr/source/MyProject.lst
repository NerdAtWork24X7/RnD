;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 09-Jul-16 10:46:18 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x28EE      	GOTO       238
_Mul_16X16_U:
;__Lib_Math.c,136 :: 		
;__Lib_Math.c,143 :: 		
0x0003	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,144 :: 		
0x0004	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,145 :: 		
0x0005	0x01FB      	CLRF       R11
;__Lib_Math.c,146 :: 		
0x0006	0x01FA      	CLRF       R10
;__Lib_Math.c,147 :: 		
0x0007	0x01F9      	CLRF       R9
;__Lib_Math.c,148 :: 		
0x0008	0x3080      	MOVLW      128
;__Lib_Math.c,149 :: 		
0x0009	0x00F8      	MOVWF      R8
;__Lib_Math.c,150 :: 		
0x000A	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,151 :: 		
0x000B	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,152 :: 		
0x000C	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,153 :: 		
0x000D	0x2817      	GOTO       $+10
;__Lib_Math.c,154 :: 		
0x000E	0x0874      	MOVF       R4, 0
;__Lib_Math.c,155 :: 		
0x000F	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,156 :: 		
0x0010	0x0875      	MOVF       R5, 0
;__Lib_Math.c,157 :: 		
0x0011	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,158 :: 		
0x0012	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,159 :: 		
0x0013	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,160 :: 		
0x0014	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,161 :: 		
0x0015	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,162 :: 		
0x0016	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,163 :: 		
0x0017	0x1FF0      	BTFSS      R0, 7
;__Lib_Math.c,164 :: 		
0x0018	0x281F      	GOTO       $+7
;__Lib_Math.c,165 :: 		
0x0019	0x0874      	MOVF       R4, 0
;__Lib_Math.c,166 :: 		
0x001A	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,167 :: 		
0x001B	0x0875      	MOVF       R5, 0
;__Lib_Math.c,168 :: 		
0x001C	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,169 :: 		
0x001D	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,170 :: 		
0x001E	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,171 :: 		
0x001F	0x0CFB      	RRF        R11, 1
;__Lib_Math.c,172 :: 		
0x0020	0x0CFA      	RRF        R10, 1
;__Lib_Math.c,173 :: 		
0x0021	0x0CF9      	RRF        R9, 1
;__Lib_Math.c,174 :: 		
0x0022	0x0CF8      	RRF        R8, 1
;__Lib_Math.c,175 :: 		
0x0023	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,176 :: 		
0x0024	0x280A      	GOTO       $-26
;__Lib_Math.c,177 :: 		
0x0025	0x087B      	MOVF       R11, 0
;__Lib_Math.c,178 :: 		
0x0026	0x00F3      	MOVWF      R3
;__Lib_Math.c,179 :: 		
0x0027	0x087A      	MOVF       R10, 0
;__Lib_Math.c,180 :: 		
0x0028	0x00F2      	MOVWF      R2
;__Lib_Math.c,181 :: 		
0x0029	0x0879      	MOVF       R9, 0
;__Lib_Math.c,182 :: 		
0x002A	0x00F1      	MOVWF      R1
;__Lib_Math.c,183 :: 		
0x002B	0x0878      	MOVF       R8, 0
;__Lib_Math.c,184 :: 		
0x002C	0x00F0      	MOVWF      R0
;__Lib_Math.c,187 :: 		
L_end_Mul_16X16_U:
0x002D	0x0008      	RETURN
; end of _Mul_16X16_U
_Mul_8X8_U:
;__Lib_Math.c,103 :: 		
;__Lib_Math.c,108 :: 		
0x002E	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,109 :: 		
0x002F	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,110 :: 		
0x0030	0x0870      	MOVF       R0, 0
;__Lib_Math.c,111 :: 		
0x0031	0x00F1      	MOVWF      R1
;__Lib_Math.c,112 :: 		
0x0032	0x01F0      	CLRF       R0
;__Lib_Math.c,113 :: 		
0x0033	0x3008      	MOVLW      8
;__Lib_Math.c,114 :: 		
0x0034	0x00FC      	MOVWF      R12
;__Lib_Math.c,115 :: 		
0x0035	0x0871      	MOVF       R1, 0
;__Lib_Math.c,116 :: 		
0x0036	0x0CF4      	RRF        R4, 1
;__Lib_Math.c,117 :: 		
0x0037	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,118 :: 		
0x0038	0x283D      	GOTO       $+5
;__Lib_Math.c,119 :: 		
0x0039	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,120 :: 		
0x003A	0x2836      	GOTO       $-4
;__Lib_Math.c,121 :: 		
0x003B	0x01F1      	CLRF       R1
;__Lib_Math.c,122 :: 		
0x003C	0x3400      	RETLW      0
;__Lib_Math.c,123 :: 		
0x003D	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,124 :: 		
0x003E	0x2842      	GOTO       $+4
;__Lib_Math.c,125 :: 		
0x003F	0x0CF4      	RRF        R4, 1
;__Lib_Math.c,126 :: 		
0x0040	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,127 :: 		
0x0041	0x07F1      	ADDWF      R1, 1
;__Lib_Math.c,128 :: 		
0x0042	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,129 :: 		
0x0043	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,130 :: 		
0x0044	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,131 :: 		
0x0045	0x283F      	GOTO       $-6
;__Lib_Math.c,133 :: 		
;__Lib_Math.c,134 :: 		
L_end_Mul_8X8_U:
0x0046	0x0008      	RETURN
; end of _Mul_8X8_U
_readDSwitch:
;Timer.c,59 :: 		unsigned int readDSwitch (void){
;Timer.c,61 :: 		unsigned char  swdelay = 0;
0x0047	0x1283      	BCF        STATUS, 5
0x0048	0x1303      	BCF        STATUS, 6
0x0049	0x01A9      	CLRF       readDSwitch_swdelay_L0
0x004A	0x01AA      	CLRF       readDSwitch_swmode_L0
;Timer.c,67 :: 		if (dsw6) { swdelay += 32; }
0x004B	0x1E05      	BTFSS      PORTA, 4
0x004C	0x284F      	GOTO       L_readDSwitch0
0x004D	0x3020      	MOVLW      32
0x004E	0x07A9      	ADDWF      readDSwitch_swdelay_L0, 1
L_readDSwitch0:
;Timer.c,68 :: 		if (dsw5) { swdelay += 16; }
0x004F	0x1F85      	BTFSS      PORTA, 7
0x0050	0x2853      	GOTO       L_readDSwitch1
0x0051	0x3010      	MOVLW      16
0x0052	0x07A9      	ADDWF      readDSwitch_swdelay_L0, 1
L_readDSwitch1:
;Timer.c,69 :: 		if (dsw4) { swdelay += 8; }
0x0053	0x1D85      	BTFSS      PORTA, 3
0x0054	0x2857      	GOTO       L_readDSwitch2
0x0055	0x3008      	MOVLW      8
0x0056	0x07A9      	ADDWF      readDSwitch_swdelay_L0, 1
L_readDSwitch2:
;Timer.c,70 :: 		if (dsw3) { swdelay += 4; }
0x0057	0x1C05      	BTFSS      PORTA, 0
0x0058	0x285B      	GOTO       L_readDSwitch3
0x0059	0x3004      	MOVLW      4
0x005A	0x07A9      	ADDWF      readDSwitch_swdelay_L0, 1
L_readDSwitch3:
;Timer.c,71 :: 		if (dsw2) { swdelay += 2; }
0x005B	0x1D05      	BTFSS      PORTA, 2
0x005C	0x285F      	GOTO       L_readDSwitch4
0x005D	0x3002      	MOVLW      2
0x005E	0x07A9      	ADDWF      readDSwitch_swdelay_L0, 1
L_readDSwitch4:
;Timer.c,72 :: 		if (dsw1) { swdelay += 1; }
0x005F	0x1C85      	BTFSS      PORTA, 1
0x0060	0x2862      	GOTO       L_readDSwitch5
0x0061	0x0AA9      	INCF       readDSwitch_swdelay_L0, 1
L_readDSwitch5:
;Timer.c,74 :: 		if (dsw9) { swmode = 4;}
0x0062	0x1D06      	BTFSS      PORTB, 2
0x0063	0x2866      	GOTO       L_readDSwitch6
0x0064	0x3004      	MOVLW      4
0x0065	0x00AA      	MOVWF      readDSwitch_swmode_L0
L_readDSwitch6:
;Timer.c,75 :: 		if (dsw8) { swmode += 2;}
0x0066	0x1C86      	BTFSS      PORTB, 1
0x0067	0x286A      	GOTO       L_readDSwitch7
0x0068	0x3002      	MOVLW      2
0x0069	0x07AA      	ADDWF      readDSwitch_swmode_L0, 1
L_readDSwitch7:
;Timer.c,76 :: 		if (dsw7) { swmode += 1;}
0x006A	0x1F05      	BTFSS      PORTA, 6
0x006B	0x286D      	GOTO       L_readDSwitch8
0x006C	0x0AAA      	INCF       readDSwitch_swmode_L0, 1
L_readDSwitch8:
;Timer.c,79 :: 		switch (swmode) {
0x006D	0x28C1      	GOTO       L_readDSwitch9
;Timer.c,81 :: 		case 0: {delaytime = swdelay;} break;          //000  1s-63s,      1 sec int
L_readDSwitch11:
0x006E	0x0829      	MOVF       readDSwitch_swdelay_L0, 0
0x006F	0x00A7      	MOVWF      readDSwitch_delaytime_L0
0x0070	0x01A8      	CLRF       readDSwitch_delaytime_L0+1
0x0071	0x28E1      	GOTO       L_readDSwitch10
;Timer.c,82 :: 		case 1: {delaytime = swdelay *  5;}  break;    //001  5s-5m15s,    5 sec int
L_readDSwitch12:
0x0072	0x0829      	MOVF       readDSwitch_swdelay_L0, 0
0x0073	0x00F0      	MOVWF      R0
0x0074	0x3005      	MOVLW      5
0x0075	0x00F4      	MOVWF      R4
0x0076	0x202E      	CALL       _Mul_8X8_U
0x0077	0x0870      	MOVF       R0, 0
0x0078	0x00A7      	MOVWF      readDSwitch_delaytime_L0
0x0079	0x0871      	MOVF       R0+1, 0
0x007A	0x00A8      	MOVWF      readDSwitch_delaytime_L0+1
0x007B	0x28E1      	GOTO       L_readDSwitch10
;Timer.c,83 :: 		case 2: {delaytime = swdelay * 15;}  break;    //010  15s-15m45s, 15 sec int
L_readDSwitch13:
0x007C	0x0829      	MOVF       readDSwitch_swdelay_L0, 0
0x007D	0x00F0      	MOVWF      R0
0x007E	0x300F      	MOVLW      15
0x007F	0x00F4      	MOVWF      R4
0x0080	0x202E      	CALL       _Mul_8X8_U
0x0081	0x0870      	MOVF       R0, 0
0x0082	0x00A7      	MOVWF      readDSwitch_delaytime_L0
0x0083	0x0871      	MOVF       R0+1, 0
0x0084	0x00A8      	MOVWF      readDSwitch_delaytime_L0+1
0x0085	0x28E1      	GOTO       L_readDSwitch10
;Timer.c,84 :: 		case 3: {delaytime = swdelay * 60;}  break;    //011  1m-63m,      1 min int
L_readDSwitch14:
0x0086	0x0829      	MOVF       readDSwitch_swdelay_L0, 0
0x0087	0x00F0      	MOVWF      R0
0x0088	0x303C      	MOVLW      60
0x0089	0x00F4      	MOVWF      R4
0x008A	0x202E      	CALL       _Mul_8X8_U
0x008B	0x0870      	MOVF       R0, 0
0x008C	0x00A7      	MOVWF      readDSwitch_delaytime_L0
0x008D	0x0871      	MOVF       R0+1, 0
0x008E	0x00A8      	MOVWF      readDSwitch_delaytime_L0+1
0x008F	0x28E1      	GOTO       L_readDSwitch10
;Timer.c,85 :: 		case 4: {delaytime = swdelay * 120;} break;    //100  2m-2h6m,     2 min int
L_readDSwitch15:
0x0090	0x0829      	MOVF       readDSwitch_swdelay_L0, 0
0x0091	0x00F0      	MOVWF      R0
0x0092	0x3078      	MOVLW      120
0x0093	0x00F4      	MOVWF      R4
0x0094	0x202E      	CALL       _Mul_8X8_U
0x0095	0x0870      	MOVF       R0, 0
0x0096	0x00A7      	MOVWF      readDSwitch_delaytime_L0
0x0097	0x0871      	MOVF       R0+1, 0
0x0098	0x00A8      	MOVWF      readDSwitch_delaytime_L0+1
0x0099	0x28E1      	GOTO       L_readDSwitch10
;Timer.c,86 :: 		case 5: {delaytime = swdelay * 300;} break;    //101  5m-5h15m,    5 min int
L_readDSwitch16:
0x009A	0x0829      	MOVF       readDSwitch_swdelay_L0, 0
0x009B	0x00F0      	MOVWF      R0
0x009C	0x01F1      	CLRF       R0+1
0x009D	0x302C      	MOVLW      44
0x009E	0x00F4      	MOVWF      R4
0x009F	0x3001      	MOVLW      1
0x00A0	0x00F5      	MOVWF      R4+1
0x00A1	0x2003      	CALL       _Mul_16X16_U
0x00A2	0x0870      	MOVF       R0, 0
0x00A3	0x00A7      	MOVWF      readDSwitch_delaytime_L0
0x00A4	0x0871      	MOVF       R0+1, 0
0x00A5	0x00A8      	MOVWF      readDSwitch_delaytime_L0+1
0x00A6	0x28E1      	GOTO       L_readDSwitch10
;Timer.c,87 :: 		case 6: {delaytime = swdelay * 600;} break;    //110  10m-10h30m,  10 min int
L_readDSwitch17:
0x00A7	0x0829      	MOVF       readDSwitch_swdelay_L0, 0
0x00A8	0x00F0      	MOVWF      R0
0x00A9	0x01F1      	CLRF       R0+1
0x00AA	0x3058      	MOVLW      88
0x00AB	0x00F4      	MOVWF      R4
0x00AC	0x3002      	MOVLW      2
0x00AD	0x00F5      	MOVWF      R4+1
0x00AE	0x2003      	CALL       _Mul_16X16_U
0x00AF	0x0870      	MOVF       R0, 0
0x00B0	0x00A7      	MOVWF      readDSwitch_delaytime_L0
0x00B1	0x0871      	MOVF       R0+1, 0
0x00B2	0x00A8      	MOVWF      readDSwitch_delaytime_L0+1
0x00B3	0x28E1      	GOTO       L_readDSwitch10
;Timer.c,88 :: 		case 7: {delaytime = swdelay * 900;} break;    //111  15m-15h45m,  15 min int
L_readDSwitch18:
0x00B4	0x0829      	MOVF       readDSwitch_swdelay_L0, 0
0x00B5	0x00F0      	MOVWF      R0
0x00B6	0x01F1      	CLRF       R0+1
0x00B7	0x3084      	MOVLW      132
0x00B8	0x00F4      	MOVWF      R4
0x00B9	0x3003      	MOVLW      3
0x00BA	0x00F5      	MOVWF      R4+1
0x00BB	0x2003      	CALL       _Mul_16X16_U
0x00BC	0x0870      	MOVF       R0, 0
0x00BD	0x00A7      	MOVWF      readDSwitch_delaytime_L0
0x00BE	0x0871      	MOVF       R0+1, 0
0x00BF	0x00A8      	MOVWF      readDSwitch_delaytime_L0+1
0x00C0	0x28E1      	GOTO       L_readDSwitch10
;Timer.c,90 :: 		}
L_readDSwitch9:
0x00C1	0x082A      	MOVF       readDSwitch_swmode_L0, 0
0x00C2	0x3A00      	XORLW      0
0x00C3	0x1903      	BTFSC      STATUS, 2
0x00C4	0x286E      	GOTO       L_readDSwitch11
0x00C5	0x082A      	MOVF       readDSwitch_swmode_L0, 0
0x00C6	0x3A01      	XORLW      1
0x00C7	0x1903      	BTFSC      STATUS, 2
0x00C8	0x2872      	GOTO       L_readDSwitch12
0x00C9	0x082A      	MOVF       readDSwitch_swmode_L0, 0
0x00CA	0x3A02      	XORLW      2
0x00CB	0x1903      	BTFSC      STATUS, 2
0x00CC	0x287C      	GOTO       L_readDSwitch13
0x00CD	0x082A      	MOVF       readDSwitch_swmode_L0, 0
0x00CE	0x3A03      	XORLW      3
0x00CF	0x1903      	BTFSC      STATUS, 2
0x00D0	0x2886      	GOTO       L_readDSwitch14
0x00D1	0x082A      	MOVF       readDSwitch_swmode_L0, 0
0x00D2	0x3A04      	XORLW      4
0x00D3	0x1903      	BTFSC      STATUS, 2
0x00D4	0x2890      	GOTO       L_readDSwitch15
0x00D5	0x082A      	MOVF       readDSwitch_swmode_L0, 0
0x00D6	0x3A05      	XORLW      5
0x00D7	0x1903      	BTFSC      STATUS, 2
0x00D8	0x289A      	GOTO       L_readDSwitch16
0x00D9	0x082A      	MOVF       readDSwitch_swmode_L0, 0
0x00DA	0x3A06      	XORLW      6
0x00DB	0x1903      	BTFSC      STATUS, 2
0x00DC	0x28A7      	GOTO       L_readDSwitch17
0x00DD	0x082A      	MOVF       readDSwitch_swmode_L0, 0
0x00DE	0x3A07      	XORLW      7
0x00DF	0x1903      	BTFSC      STATUS, 2
0x00E0	0x28B4      	GOTO       L_readDSwitch18
L_readDSwitch10:
;Timer.c,91 :: 		return delaytime;
0x00E1	0x0827      	MOVF       readDSwitch_delaytime_L0, 0
0x00E2	0x00F0      	MOVWF      R0
0x00E3	0x0828      	MOVF       readDSwitch_delaytime_L0+1, 0
0x00E4	0x00F1      	MOVWF      R0+1
;Timer.c,92 :: 		}
L_end_readDSwitch:
0x00E5	0x0008      	RETURN
; end of _readDSwitch
_stopTimer:
;Timer.c,48 :: 		void stopTimer() {
;Timer.c,50 :: 		PORTB = (0<<outTimer | 1<<outHbLed); // turn off outputs
0x00E6	0x3010      	MOVLW      16
0x00E7	0x1283      	BCF        STATUS, 5
0x00E8	0x1303      	BCF        STATUS, 6
0x00E9	0x0086      	MOVWF      PORTB
;Timer.c,51 :: 		T1CON.TMR1ON = 0;                    // stop timer 1
0x00EA	0x1010      	BCF        T1CON, 0
;Timer.c,52 :: 		PIR1.CCP1IF = 0;                     // clear timer interrupt flag
0x00EB	0x110C      	BCF        PIR1, 2
;Timer.c,53 :: 		timerRun = 0;                        // clear timer running flag bit
0x00EC	0x1022      	BCF        _timerRun, BitPos(_timerRun+0)
;Timer.c,54 :: 		}
L_end_stopTimer:
0x00ED	0x0008      	RETURN
; end of _stopTimer
_main:
;Timer.c,95 :: 		void main() {
;Timer.c,97 :: 		CMCON = 0x07;
0x00EE	0x3007      	MOVLW      7
0x00EF	0x1683      	BSF        STATUS, 5
0x00F0	0x1303      	BCF        STATUS, 6
0x00F1	0x009C      	MOVWF      CMCON
;Timer.c,98 :: 		PORTB = 1<<outHbLed;
0x00F2	0x3010      	MOVLW      16
0x00F3	0x1283      	BCF        STATUS, 5
0x00F4	0x0086      	MOVWF      PORTB
;Timer.c,99 :: 		PORTA = 0;
0x00F5	0x0185      	CLRF       PORTA
;Timer.c,101 :: 		TRISB = ~(1<<outHbLed | 1<< outTimer );
0x00F6	0x30CF      	MOVLW      207
0x00F7	0x1683      	BSF        STATUS, 5
0x00F8	0x0086      	MOVWF      TRISB
;Timer.c,102 :: 		TRISA = 0xFF;
0x00F9	0x30FF      	MOVLW      255
0x00FA	0x0085      	MOVWF      TRISA
;Timer.c,104 :: 		OPTION_REG.INTEDG = 0;    // Set INT RB0 input to falling edge
0x00FB	0x1301      	BCF        OPTION_REG, 6
;Timer.c,106 :: 		TMR1L = 0;
0x00FC	0x1283      	BCF        STATUS, 5
0x00FD	0x018E      	CLRF       TMR1L
;Timer.c,107 :: 		TMR1H = 0;
0x00FE	0x018F      	CLRF       TMR1H
;Timer.c,108 :: 		T1CON.T1CKPS0 = 0;        // Set Timer 1 prescaler
0x00FF	0x1210      	BCF        T1CON, 4
;Timer.c,109 :: 		T1CON.T1CKPS1 = 0;
0x0100	0x1290      	BCF        T1CON, 5
;Timer.c,110 :: 		T1CON.TMR1CS  = 1;
0x0101	0x1490      	BSF        T1CON, 1
;Timer.c,111 :: 		T1CON.T1OSCEN = 1;
0x0102	0x1590      	BSF        T1CON, 3
;Timer.c,113 :: 		CCP1CON = 0b00001011;            // Timer 1 compare mode, Special Event mode
0x0103	0x300B      	MOVLW      11
0x0104	0x0097      	MOVWF      CCP1CON
;Timer.c,114 :: 		CCPR1L = (16383 & 0x00FF);       // Preset compare register low/high bytes
0x0105	0x30FF      	MOVLW      255
0x0106	0x0095      	MOVWF      CCPR1L
;Timer.c,115 :: 		CCPR1H = (16383 & 0xFF00)>>8;
0x0107	0x303F      	MOVLW      63
0x0108	0x0096      	MOVWF      CCPR1H
;Timer.c,118 :: 		PIR1.CCP1IF = 0;        // Clear timer1 compare interrupt
0x0109	0x110C      	BCF        PIR1, 2
;Timer.c,119 :: 		INTCON.INTF = 0;        // Clear INT flag
0x010A	0x108B      	BCF        INTCON, 1
;Timer.c,123 :: 		timerRun = 0;
0x010B	0x1022      	BCF        _timerRun, BitPos(_timerRun+0)
;Timer.c,124 :: 		tick = 0;
0x010C	0x10A2      	BCF        _tick, BitPos(_tick+0)
;Timer.c,125 :: 		timerPeriod = readDSwitch();
0x010D	0x2047      	CALL       _readDSwitch
0x010E	0x0870      	MOVF       R0, 0
0x010F	0x00A5      	MOVWF      _timerPeriod
0x0110	0x0871      	MOVF       R0+1, 0
0x0111	0x00A6      	MOVWF      _timerPeriod+1
;Timer.c,127 :: 		while(1){
L_main19:
;Timer.c,130 :: 		if ( PIR1.CCP1IF ){
0x0112	0x1D0C      	BTFSS      PIR1, 2
0x0113	0x292C      	GOTO       L_main21
;Timer.c,133 :: 		PIR1.CCP1IF = 0;              // clear interrupt flag
0x0114	0x110C      	BCF        PIR1, 2
;Timer.c,135 :: 		pb_outHbLed = !pb_outHbLed;   // toggle hearbeat LED
0x0115	0x3010      	MOVLW      16
0x0116	0x0686      	XORWF      PORTB, 1
;Timer.c,137 :: 		if (tick){ counter--; }        // if tick flag true, decrement counter
0x0117	0x1CA2      	BTFSS      _tick, BitPos(_tick+0)
0x0118	0x2925      	GOTO       L_main22
0x0119	0x3001      	MOVLW      1
0x011A	0x0223      	SUBWF      _counter, 0
0x011B	0x00F0      	MOVWF      R0
0x011C	0x3000      	MOVLW      0
0x011D	0x1C03      	BTFSS      STATUS, 0
0x011E	0x3E01      	ADDLW      1
0x011F	0x0224      	SUBWF      _counter+1, 0
0x0120	0x00F1      	MOVWF      R0+1
0x0121	0x0870      	MOVF       R0, 0
0x0122	0x00A3      	MOVWF      _counter
0x0123	0x0871      	MOVF       R0+1, 0
0x0124	0x00A4      	MOVWF      _counter+1
L_main22:
;Timer.c,138 :: 		if (!counter){ stopTimer();}   // if counter == 0 then stop timer.
0x0125	0x0823      	MOVF       _counter, 0
0x0126	0x0424      	IORWF      _counter+1, 0
0x0127	0x1D03      	BTFSS      STATUS, 2
0x0128	0x292A      	GOTO       L_main23
0x0129	0x20E6      	CALL       _stopTimer
L_main23:
;Timer.c,140 :: 		tick = !tick;                // toggle tick flag bit
0x012A	0x3002      	MOVLW      2
0x012B	0x06A2      	XORWF      _tick, 1
;Timer.c,142 :: 		}
L_main21:
;Timer.c,145 :: 		if (!pb_inClr){
0x012C	0x1A85      	BTFSC      PORTA, 5
0x012D	0x292F      	GOTO       L_main24
;Timer.c,146 :: 		stopTimer();
0x012E	0x20E6      	CALL       _stopTimer
;Timer.c,148 :: 		}
L_main24:
;Timer.c,152 :: 		if (INTCON.INTF){
0x012F	0x1C8B      	BTFSS      INTCON, 1
0x0130	0x295A      	GOTO       L_main25
;Timer.c,154 :: 		INTCON.INTF = 0;         // clear INT flag
0x0131	0x108B      	BCF        INTCON, 1
;Timer.c,158 :: 		if (pb_inClr){
0x0132	0x1E85      	BTFSS      PORTA, 5
0x0133	0x295A      	GOTO       L_main26
;Timer.c,161 :: 		if (!timerRun){
0x0134	0x1822      	BTFSC      _timerRun, BitPos(_timerRun+0)
0x0135	0x2949      	GOTO       L_main27
;Timer.c,163 :: 		TMR1L = TMR1H = 0;      // reset timer 0
0x0136	0x018F      	CLRF       TMR1H
0x0137	0x080F      	MOVF       TMR1H, 0
0x0138	0x008E      	MOVWF      TMR1L
;Timer.c,164 :: 		T1CON.TMR1ON = 1;       // enable Timer1
0x0139	0x1410      	BSF        T1CON, 0
;Timer.c,165 :: 		PIR1.CCP1IF = 0;        // clear interrupt flag
0x013A	0x110C      	BCF        PIR1, 2
;Timer.c,167 :: 		PORTB = (1<<outTimer | 0<<outHbLed); // Enable output
0x013B	0x3020      	MOVLW      32
0x013C	0x0086      	MOVWF      PORTB
;Timer.c,169 :: 		timerRun = 1;           // Set Timer running flag bit
0x013D	0x1422      	BSF        _timerRun, BitPos(_timerRun+0)
;Timer.c,170 :: 		tick = 0;               // Clear tick flag bit
0x013E	0x10A2      	BCF        _tick, BitPos(_tick+0)
;Timer.c,172 :: 		timerPeriod = readDSwitch();
0x013F	0x2047      	CALL       _readDSwitch
0x0140	0x0870      	MOVF       R0, 0
0x0141	0x00A5      	MOVWF      _timerPeriod
0x0142	0x0871      	MOVF       R0+1, 0
0x0143	0x00A6      	MOVWF      _timerPeriod+1
;Timer.c,173 :: 		counter = timerPeriod;
0x0144	0x0825      	MOVF       _timerPeriod, 0
0x0145	0x00A3      	MOVWF      _counter
0x0146	0x0826      	MOVF       _timerPeriod+1, 0
0x0147	0x00A4      	MOVWF      _counter+1
;Timer.c,176 :: 		}else if (dsw10){
0x0148	0x295A      	GOTO       L_main28
L_main27:
0x0149	0x1D86      	BTFSS      PORTB, 3
0x014A	0x295A      	GOTO       L_main29
;Timer.c,177 :: 		TMR1L = TMR1H = 0;      // reset timer 0
0x014B	0x018F      	CLRF       TMR1H
0x014C	0x080F      	MOVF       TMR1H, 0
0x014D	0x008E      	MOVWF      TMR1L
;Timer.c,178 :: 		T1CON.TMR1ON = 1;       // enable Timer1
0x014E	0x1410      	BSF        T1CON, 0
;Timer.c,179 :: 		PIR1.CCP1IF = 0;        // clear interrupt flag
0x014F	0x110C      	BCF        PIR1, 2
;Timer.c,180 :: 		tick = 0;               // Clear tick flag bit
0x0150	0x10A2      	BCF        _tick, BitPos(_tick+0)
;Timer.c,181 :: 		timerPeriod = readDSwitch();
0x0151	0x2047      	CALL       _readDSwitch
0x0152	0x0870      	MOVF       R0, 0
0x0153	0x00A5      	MOVWF      _timerPeriod
0x0154	0x0871      	MOVF       R0+1, 0
0x0155	0x00A6      	MOVWF      _timerPeriod+1
;Timer.c,182 :: 		counter = timerPeriod;
0x0156	0x0825      	MOVF       _timerPeriod, 0
0x0157	0x00A3      	MOVWF      _counter
0x0158	0x0826      	MOVF       _timerPeriod+1, 0
0x0159	0x00A4      	MOVWF      _counter+1
;Timer.c,184 :: 		}
L_main29:
L_main28:
;Timer.c,185 :: 		}
L_main26:
;Timer.c,187 :: 		}
L_main25:
;Timer.c,189 :: 		}
0x015A	0x2912      	GOTO       L_main19
;Timer.c,191 :: 		}
L_end_main:
0x015B	0x295B      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003      [43]    _Mul_16X16_U
0x002E      [25]    _Mul_8X8_U
0x0047     [159]    _readDSwitch
0x00E6       [8]    _stopTimer
0x00EE     [110]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [0]    dsw5
0x0005       [1]    PORTA
0x0005       [0]    dsw6
0x0005       [0]    dsw7
0x0005       [0]    dsw1
0x0005       [0]    dsw2
0x0005       [0]    pb_inClr
0x0005       [0]    dsw4
0x0005       [0]    dsw3
0x0006       [0]    dsw10
0x0006       [0]    dsw8
0x0006       [0]    dsw9
0x0006       [0]    pb_outHbLed
0x0006       [1]    PORTB
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x000E       [1]    TMR1L
0x000F       [1]    TMR1H
0x0010       [1]    T1CON
0x0015       [1]    CCPR1L
0x0016       [1]    CCPR1H
0x0017       [1]    CCP1CON
0x0020       [2]    ___DoICPAddr
0x0022       [0]    _timerRun
0x0022       [0]    _tick
0x0023       [2]    _counter
0x0025       [2]    _timerPeriod
0x0027       [2]    readDSwitch_delaytime_L0
0x0029       [1]    readDSwitch_swdelay_L0
0x002A       [1]    readDSwitch_swmode_L0
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [1]    TRISA
0x0086       [1]    TRISB
0x009C       [1]    CMCON
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x2100       [3]    _EEPROMdata
